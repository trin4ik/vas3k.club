import json
import urllib.request
from datetime import datetime, timedelta

from django.conf import settings
from django.core.management import BaseCommand

from posts.models.post import Post
from users.models.user import User
from common.markdown.markdown import markdown_text
from utils.strings import random_string


class Command(BaseCommand):
    help = "–ò–º–ø–æ—Ä—Ç –ø–æ—Å—Ç–æ–≤ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ vas3k.club –Ω–∞ dev/local —Å–±–æ—Ä–∫–∏"

    def add_arguments(self, parser):
        parser.add_argument(
            "--pages",
            type=int,
            default=1,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü, –∑–∞–±–∏—Ä–∞–µ–º—ã—Ö –∏–∑ —Ñ–∏–¥–∞",
        )

        parser.add_argument(
            "--skip",
            type=int,
            default=0,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        )

        parser.add_argument(
            "--force",
            action="store_true",
            help="–ó–∞–º–µ–Ω—è—Ç—å –ø–æ—Å—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç",
        )

    def handle(self, *args, **options):
        if not settings.DEBUG:
            return self.stdout.write("‚ò¢Ô∏è  –¢–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ DEBUG —Ä–µ–∂–∏–º–µ")

        result = {
            'post_exists': 0,
            'post_created': 0,
            'user_created': 0
        }

        for x in range(options['skip'], options['pages'] + options['skip']):
            url = "https://vas3k.club/feed.json?page={}".format(x + 1)
            self.stdout.write("üìÅ {}".format(url))
            req = urllib.request.Request(url)
            req.add_header('User-Agent', 'Mozilla/5.0')
            response = urllib.request.urlopen(req)
            data = json.load(response)
            for item in data['items']:
                # –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –Ω–∞—Ñ–∏–≥
                if not (item['_club']['is_public']):
                    continue

                author, created = create_user(item['authors'][0])
                if created:
                    result['user_created'] += 1
                    self.stdout.write(" üë§ \"{}\" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω".format(author.full_name))

                defaults = dict(
                    id=item['id'],
                    title=item['title'],
                    type=item['_club']['type'],
                    slug=random_string(10),
                    text=item['content_text'],
                    html=markdown_text(item['content_text']),
                    image=author.avatar,  # —Ö–∞–∫ –¥–ª—è –ø–æ—Å—Ç–æ–≤ —Ç–∏–ø–∞ "–ø—Ä–æ–µ–∫—Ç", —á—Ç–æ–±—ã –Ω–µ –ª–∞–∑–∏—Ç—å –ø–æ –≤–∞—Å—Ç—Ä–∏–∫—É –ª–∏—à–Ω–∏–π —Ä–∞–∑
                    created_at=item['date_published'],
                    comment_count=item['_club']['comment_count'],
                    view_count=item['_club']['view_count'],
                    upvotes=item['_club']['upvotes'],
                    is_visible=True,
                    is_visible_in_feeds=True,
                    is_commentable=True,
                    is_approved_by_moderator=True,
                    is_public=True,
                    author_id=author.id,
                    is_shadow_banned=False,
                    published_at=item['date_published'],
                    coauthors=[]
                )

                exists = False
                try:
                    post = Post.objects.get(id=item['id'])
                    exists = True
                except Post.DoesNotExist:
                    post = Post.objects.create(**defaults)

                if exists and not options['force']:
                    result['post_exists'] += 1
                    self.stdout.write(" üìå \"{}\" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç".format(item['title']))
                    continue

                post.__dict__.update(defaults)
                post.save()

                result['post_created'] += 1
                self.stdout.write(" üìÑ \"{}\" –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞".format(item['title']))

        self.stdout.write("")
        self.stdout.write("–ò—Ç–æ–≥–æ:")
        self.stdout.write("üìÑ –ù–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤: {}".format(result['post_created']))
        self.stdout.write("üìå –£–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ: {}".format(result['post_exists']))
        self.stdout.write("üë§ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {}".format(result['user_created']))


def create_user(author):
    split = author['url'].split('/')
    slug = split[-2]

    defaults = dict(
        slug=slug,
        avatar=author['avatar'],
        email=random_string(30),
        full_name=author['name'],
        company="FAANG",
        position="Team Lead –∫–æ–Ω–µ—á–Ω–æ",
        balance=10000,
        created_at=datetime.utcnow(),
        updated_at=datetime.utcnow(),
        membership_started_at=datetime.now(),
        membership_expires_at=datetime.utcnow() + timedelta(days=365 * 100),
        is_email_verified=True,
        moderation_status=User.MODERATION_STATUS_APPROVED,
        roles=[],
    )

    user, created = User.objects.get_or_create(slug=slug, defaults=defaults)

    return user, created
